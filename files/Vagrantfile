# -*- mode: ruby -*-
# vi: set ft=ruby :

################################################################################
#     Copyright (c) 2022 Arsene Temfack                                        #
#                                                                              #
#     SPDX-License-Identifier: MIT                                             #
################################################################################

ENV['VAGRANT_BOX_UPDATE_CHECK_DISABLE']	  = 'yes'
ENV['VAGRANT_CHECKPOINT_DISABLE']			    = 'yes'
ENV['VAGRANT_DISABLE_VBOXSYMLINKCREATE']	= 'yes'
ENV['VAGRANT_NO_PARALLEL']					      = 'yes'

# Defaults
NAME          = ENV["NAME"]         || "VM42"
HOSTNAME      = ENV["HOSTNAME"]     || "VM42"

CPU           = ENV["CPU"]          || "1"
MEMORY        = ENV["MEMORY"]       || "1024"

IMAGE         = ENV["IMAGE"]        || "generic/ubuntu2004"
TAG           = ENV["TAG"]          || "4.3.6"

PROVIDER      = ENV["PROVIDER"]     || "virtualbox"

NETWORK       = ENV["NETWORK"]      || "private"
IP            = ENV["IP"]           || "None"
MAC           = ENV["MAC"]          || "None"
BRIDGE        = ENV["BRIDGE"]       || "None"
GUEST_PORT    = ENV["GUEST_PORT"]   || "80"
HOST_PORT     = ENV["HOST_PORT"]    || "8080"
HOST_IP       = ENV["HOST_IP"]      || "None"


DISABLE_SYNC  = ENV["DISABLE_SYNC"] || true
LOCAL_SYNC    = ENV['LOCAL_SYNC']   || "."
REMOTE_SYNC   = ENV['REMOTE_SYNC']  || "/vagrant"

PLAYBOOK      = ENV["PLAYBOOK"]     || "void.yml"
SCRIPT        = ENV["SCRIPT"]       || "void.sh"
SCRIPT_ARGS   = ENV["SCRIPT_ARGS"]  || ""

Vagrant.configure("2") do |config|
  # For a complete reference, the online documentation is at
  # https://docs.vagrantup.com.

  # Synced folders
  config.vm.synced_folder "#{LOCAL_SYNC}", "#{REMOTE_SYNC}",
    disabled: "#{DISABLE_SYNC}", type: "rsync"
  
  # Default provisioning with ansible.
  config.vm.provision "default", type: "ansible", run: "always" do |ansible|
    ansible.playbook = "default_playbook.yml"
  end

  # Enable provisioning with ansible.
  config.vm.provision "ansible", type: "ansible", run: "once" do |ansible|
    ansible.playbook = "#{PLAYBOOK}"
  end
  
  # Enable provisioning with a shell script.
  config.vm.provision "script", type: "shell", run: "once",
    path: "#{SCRIPT}", args: "#{SCRIPT_ARGS}"


  config.vm.define "#{NAME}", autostart: false do |node|
    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://vagrantcloud.com/search.
    node.vm.box = "#{IMAGE}"
    node.vm.box_version = "#{TAG}"

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    node.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine and only allow access
    # via a spacific ip to disable public access
    if ENV['NETWORK'] == 'forwarded_port'
      if ENV['HOST_IP'] == 'None'
        node.vm.network "forwarded_port", guest: "#{GUEST_PORT}",
          host: "#{HOST_PORT}"
      else
        node.vm.network "forwarded_port", guest: "#{GUEST_PORT}",
          host: "#{HOST_PORT}", host_ip: "#{HOST_IP}"
      end
    end

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    if ENV['NETWORK'] == 'private'
      node.vm.network "private_network", ip: "#{IP}"
    end

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    if ENV['NETWORK'] == 'public'
      if ENV['IP'] == 'None'
        if ENV['MAC'] == 'None'
          if ENV['BRIDGE'] == 'None'
            node.vm.network "public_network"
          else
            node.vm.network "public_network", bridge: "#{BRIDGE}"
          end
        else
          node.vm.network "public_network", bridge: "#{BRIDGE}",
            mac: "#{MAC}"
        end
      else
        if ENV['BRIDGE'] == 'None'
          node.vm.network "public_network", ip: "#{IP}"
        else
          if ENV['MAC'] == 'None'
            node.vm.network "public_network", ip: "#{IP}",
              bridge: "#{BRIDGE}"
          else
            node.vm.network "public_network", ip: "#{IP}",
              bridge: "#{BRIDGE}", mac: "#{MAC}"
          end
        end
      end
    end

    # Set the hostname.
    node.vm.hostname = "#{HOSTNAME}"

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    #
    # For VirtualBox:
    if ENV['PROVIDER'] == 'virtualbox'
      node.vm.provider "#{PROVIDER}" do |vb|
        vb.gui = false
        vb.cpus = "#{CPU}"
        vb.memory = "#{MEMORY}"
        vb.name = "#{NAME}"
      end
    end
  end
end

# Clean up private network on host:
#	Remove virtual Box interface `vboxnetX`:
#		$ VBoxManage hostonlyif remove vboxnetX

# Reference(s):
#   https://www.vagrantup.com/docs
