---
# tasks file for vm
- name: Set available actions
  set_fact:
    actions_start:
      - status
      - validate
      - up
      - resume
      - reload
    actions_stop:
      - halt
      - suspend
      - destroy

- name: Set command
  set_fact:
    cmd: >-
      {%- if action == 'destroy' -%}
        vagrant --no-tty {{ action }} --force
      {%- elif action in actions_start or action in actions_stop -%}
        vagrant --no-tty {{ action }}
      {%- else -%}
        vagrant --no-tty status
      {%- endif -%}

- name: Copy files to the host machine
  block:
  - name: Create working directory if not present
    ansible.builtin.file:
      path: "{{ working_dir }}"
      state: directory

  - name: Copy node files
    copy:
      src: "./"
      dest: "{{ working_dir }}"
      force: yes
      mode: 0755
  when:
  - action in actions_start

- name: Check if '{{ pub_key }}' exists
  stat:
    path: "{{ pub_key }}"
  register: is_pub_key
  when: action in actions_start and pub_key

- name: Copy pub key to the host machine
  copy:
    src: "{{ pub_key }}"
    dest: "{{ working_dir }}/id_rsa.pub"
  when: 
  - action in actions_start
  - pub_key and is_pub_key.stat.exists

- name: Install packages
  become: true
  package:
    name: "{{ item }}"
    state: present
  with_items:
  - ansible
  when: action in actions_start

- name: Check if Vagrantfile exists
  stat:
    path: "{{ working_dir }}/Vagrantfile"
  register: Vagrantfile

- name: "vagrant {{ action }}"
  block:
  - name: "{{ action }} nodes"
    shell: "{{ cmd }} {{ item.NAME }}"
    args:
      chdir: "{{ working_dir }}"
    environment:
      NAME:         "{{ item.NAME }}"
      HOSTNAME:     "{{ item.HOSTNAME }}"
      CPU:          "{{ item.CPU }}"
      MEMORY:       "{{ item.MEMORY }}"
      IMAGE:        "{{ item.IMAGE }}"
      TAG:          "{{ item.TAG }}"
      PROVIDER:     "{{ item.PROVIDER }}"
      NETWORK:      "{{ item.NETWORK }}"
      IP:           "{{ item.IP }}"
      MAC:          "{{ item.MAC }}"
      BRIDGE:       "{{ item.BRIDGE }}"
      DISABLE_SYNC: "{{ item.DISABLE_SYNC }}"
      LOCAL_SYNC:   "{{ item.LOCAL_SYNC }}"
      REMOTE_SYNC:  "{{ item.REMOTE_SYNC }}"
      # PLAYBOOK:     "{{ item.PLAYBOOK }}"
      # SCRIPT:       "{{ item.SCRIPT }}"
      # SCRIPT_ARGS:  "{{ item.SCRIPT_ARGS }}"
    register: response
    with_items: "{{ nodes_vm }}"

  - debug:
      msg: 
        - "{{ item.stdout_lines | default(item) }}"
    with_items:
    - "{{ response.results | default(response) }}"

  when:
  - Vagrantfile.stat.exists
  - node_select is undefined or not node_select

- name: "vagrant {{ action }} {{ node_select }}"
  block:
    - name: Get index of node
      set_fact:
        NAME:         "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='NAME') | first }}"
        HOSTNAME:     "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='HOSTNAME') | first }}"
        CPU:          "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='CPU') | first }}"
        MEMORY:       "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='MEMORY') | first }}"
        IMAGE:        "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='IMAGE') | first }}"
        TAG:          "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='TAG') | first }}"
        PROVIDER:     "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='PROVIDER') | first }}"
        NETWORK:      "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='NETWORK') | first }}"
        IP:           "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='IP') | first }}"
        MAC:          "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='MAC') | first }}"
        BRIDGE:       "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='BRIDGE') | first }}"
        DISABLE_SYNC: "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='DISABLE_SYNC') | first }}"
        LOCAL_SYNC:   "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='LOCAL_SYNC') | first }}"
        REMOTE_SYNC:  "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='REMOTE_SYNC') | first }}"
        # PLAYBOOK:     "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='PLAYBOOK') | first }}"
        # SCRIPT:       "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='SCRIPT') | first }}"
        # SCRIPT_ARGS:  "{{ nodes_vm | selectattr('NAME', 'equalto', node_select) | map(attribute='SCRIPT_ARGS') | first }}"
    
    - name: Apply command
      shell: "{{ cmd }} {{ node_select }}"
      args:
        chdir: "{{ working_dir }}"
      environment:
        NAME:         "{{ NAME }}"
        HOSTNAME:     "{{ HOSTNAME }}"
        CPU:          "{{ CPU }}"
        MEMORY:       "{{ MEMORY }}"
        IMAGE:        "{{ IMAGE }}"
        TAG:          "{{ TAG }}"
        PROVIDER:     "{{ PROVIDER }}"
        NETWORK:      "{{ NETWORK }}"
        IP:           "{{ IP }}"
        MAC:          "{{ MAC }}"
        BRIDGE:       "{{ BRIDGE }}"
        DISABLE_SYNC: "{{ DISABLE_SYNC }}"
        LOCAL_SYNC:   "{{ LOCAL_SYNC }}"
        REMOTE_SYNC:  "{{ REMOTE_SYNC }}"
        # PLAYBOOK:     "{{ PLAYBOOK }}"
        # SCRIPT:       "{{ SCRIPT }}"
        # SCRIPT_ARGS:  "{{ SCRIPT_ARGS }}"
      register: response

    - debug:
        msg: 
          - "{{ item.stdout_lines | default(item) }}"
      with_items:
      - "{{ response.results | default(response) }}"

  when:
  - Vagrantfile.stat.exists
  - node_select is defined and node_select
  - nodes_vm | selectattr('NAME', 'eq', node_select ) | list | first is defined

- name: Recursively remove directory
  file:
    path: "{{ working_dir }}"
    state: absent
  when: action == "destroy"